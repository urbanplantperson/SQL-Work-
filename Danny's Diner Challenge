CREATE TABLE sales (
  "customer_id" VARCHAR(1),
  "order_date" DATE,
  "product_id" INTEGER
);

INSERT INTO sales
  ("customer_id", "order_date", "product_id")
VALUES
  ('A', '2021-01-01', '1'),
  ('A', '2021-01-01', '2'),
  ('A', '2021-01-07', '2'),
  ('A', '2021-01-10', '3'),
  ('A', '2021-01-11', '3'),
  ('A', '2021-01-11', '3'),
  ('B', '2021-01-01', '2'),
  ('B', '2021-01-02', '2'),
  ('B', '2021-01-04', '1'),
  ('B', '2021-01-11', '1'),
  ('B', '2021-01-16', '3'),
  ('B', '2021-02-01', '3'),
  ('C', '2021-01-01', '3'),
  ('C', '2021-01-01', '3'),
  ('C', '2021-01-07', '3');
 

CREATE TABLE menu (
  "product_id" INTEGER,
  "product_name" VARCHAR(5),
  "price" INTEGER
);

INSERT INTO menu
  ("product_id", "product_name", "price")
VALUES
  ('1', 'sushi', '10'),
  ('2', 'curry', '15'),
  ('3', 'ramen', '12');
  

CREATE TABLE members (
  "customer_id" VARCHAR(1),
  "join_date" DATE
);

INSERT INTO members
  ("customer_id", "join_date")
VALUES
  ('A', '2021-01-07'),
  ('B', '2021-01-09');
  
Question #1: What is the total amount each customer spent at the restaurant?  

Answer: 
           A   76
           B   74
           C   36
 
--- Looking at the data tables, product_id is a primary key in the SALES and MENU table. First I join SALES and MENU on that primary key --- 
SELECT
  *
FROM sales
INNER JOIN menu
ON menu.product_id = sales.product_id

--- I want total amount per customer so I select customer_id and SUM(price) and use GROUP BY. I add ORDER BY DESC to organize the results --- 

SELECT
  customer_id, SUM(price) as Total_Spent
FROM sales
INNER JOIN menu
  ON menu.product_id = sales.product_id
GROUP BY customer_id
ORDER BY Total_spent DESC;

Question #2: How many days has each customer visited the restaurant?

Answer: 
           A   4
           B   6
           C   2
           
--- I use DISTINCT COUNT to add up order_date entries per customer. DISTINCT will make sure the same date is not counted twice --- 

SELECT
  customer_id, COUNT(DISTINCT order_date) AS total_days
FROM sales
GROUP BY customer_id;

Question #3:  What was the first item from the menu purchased by each customer?

Answer:
          A   Curry + Sushi  
          B   Curry 
          C   Ramen 
   
--- First I join MENU and SALES tables on product_id and ORDER BY order_date ASC so I can see the oldest purchase date --- 
SELECT
  customer_id, product_name, order_date
FROM sales
JOIN menu
  ON menu.product_id = sales.product_id
ORDER BY order_date ASC

--- This table is relatively small so I can see that the first 5 entries are from the oldest purchase date available "2021 - 01 - 01". I use a WHERE clause but I could also use LIMIT 5 --- 
SELECT
  customer_id, product_name, order_date 
FROM sales
JOIN menu
  ON menu.product_id = sales.product_id
WHERE order_date = '2021-01-01'
ORDER BY order_date ASC;

Question #4: What is the most purchased item on the menu and how many times was it purchased by all customers?

Answer: 
        Ramen   8   

--- I join MENU and SALES and use COUNT to tally products as # of times purchased --- 
SELECT 
  product_name, COUNT(product_name) AS times_purchased
FROM sales
JOIN menu 
  ON menu.product_id = sales.product_id
GROUP BY product_name
ORDER BY times_purchased DESC
Limit 1;

Question #5: Which item was the most popular for each customer?

Answer:  
   customer_id  product_name   product_count
        A          Ramen            3
        B          Ramen            1
        B          Sushi            1
        B          Curry            1
        C          Ramen            3

--- Create cte to rank most popular items for each customer ---
WITH cte AS (
  SELECT 
    customer_id, product_name,
    COUNT(sales.product_id) as product_count,
    DENSE_RANK() OVER (PARTITION BY customer_id ORDER BY COUNT(sales.product_id) DESC) as sales_rank
  FROM sales
  JOIN menu
  ON menu.product_id = sales.product_id
  GROUP BY customer_id, product_name
)
SELECT 
  customer_id,  product_name,  product_count, sales_rank
FROM cte
WHERE sales_rank = 1;

Question #6:  Which item was purchased first by the customer after they became a member?

Answer: 
        A   Curry 
        B   Sushi

--- First I join all three tables on their respective primary keys and filter for the first purchase date after join date --- 
SELECT 
  sales.customer_id, sales.order_date, menu.product_name, members.join_date
FROM sales 
JOIN menu 
  ON menu.product_id = sales.product_id
	  JOIN members 
      ON members.customer_id = sales.customer_id
WHERE members.join_date <= sales.order_date
ORDER BY sales.order_date ASC

--- To select the first item bought I use a CTE to run the function and select from it --- 
WITH ranked_sales AS 
(SELECT sales.customer_id, sales.order_date, menu.product_name, members.join_date,
 RANK () OVER (PARTITION BY sales.customer_id ORDER BY sales.order_date) AS rank
FROM sales 
JOIN menu 
ON menu.product_id = sales.product_id
	JOIN members 
    ON members.customer_id = sales.customer_id
WHERE members.join_date <= sales.order_date)
SELECT customer_id, product_name, order_date, join_date 
FROM ranked_sales
WHERE rank = 1;

Question #7: Which item was purchased just before the customer became a member?

Answer:
        A     Sushi
        A     Curry
        B     Curry 

--- This can be answered using the CTE query above by editing mem.join_date > s.order_date --- 
WITH ranked_sales AS 
(SELECT sales.customer_id, sales.order_date, menu.product_name, members.join_date,
 RANK () OVER (PARTITION BY sales.customer_id ORDER BY sales.order_date) AS rank
FROM sales 
JOIN menu 
ON menu.product_id = sales.product_id
	JOIN members 
    ON members.customer_id = sales.customer_id
WHERE members.join_date > sales.order_date)
SELECT customer_id, product_name, order_date, join_date 
FROM ranked_sales
WHERE rank = 1;

Question #8: What is the total items and amount spent for each member before they became a member?

Answer:
  customer_id  number_of_items  total_price
        A            3              40
        B            2              25

--- Join all three tables, COUNT products and SUM price, filter by join_date > order_date --- 
SELECT sales.customer_id, COUNT(sales.product_id) AS number_of_items, SUM(menu.price) AS total_price
FROM sales 
JOIN menu 
ON menu.product_id = sales.product_id 
	JOIN members 
    	ON members.customer_id = sales.customer_id
WHERE members.join_date > sales.order_date
GROUP BY sales.customer_id; 

Question #9: If each $1 spent equates to 10 points and sushi has a 2x points multiplier - how many points would each customer have?

Answer:
        customer_id    total_points
              A             860
              B             940
              C             360

--- Use CASE to SUM multiplier --- 
SELECT 
  customer_id,
    SUM(CASE 
      WHEN menu.product_name = 'sushi' THEN menu.price*20
      ELSE menu.price*10
    END) AS total_points
FROM sales 
JOIN menu 
  ON menu.product_id = sales.product_id 
GROUP BY customer_id
ORDER BY customer_id ASC; 

Question #10: In the first week after a customer joins the program (including their join date) they earn 2x points on all items, not just sushi - how many points do customer A and B have at the end of January?

Answer:
        customer_id     total_points
             A              1370
             B              940

--- Using the CASE query from the previous question, edit to limit the date to be the first week after join_date for customer A and B --- 
SELECT customer_id,
SUM(CASE 
WHEN menu.product_name = 'sushi' THEN menu.price*20
WHEN sales.order_date BETWEEN '2021-01-07' AND '2021-01-14' THEN menu.price*20
    ELSE menu.price*10
END) AS total_points
FROM sales 
JOIN menu 
ON menu.product_id = sales.product_id
WHERE customer_id IN ('A', 'B')
GROUP BY customer_id;





  
 
